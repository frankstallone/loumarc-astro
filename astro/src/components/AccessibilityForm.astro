---
import type { Slug } from '../ts/types';

export interface AccessibilityFormLabelTypes {
  name?: string;
  email?: string;
  phone?: string;
  message: string;
  submit?: string;
}

export const FormLabels: Record<Slug, AccessibilityFormLabelTypes> = {
  default: {
    name: 'Name',
    email: 'Email',
    phone: 'Phone',
    message: 'Where have you found issues using our website?',
    submit: 'Submit',
  },
  'how-to-gain-more-peoples-attention-with-signs-near-your-business': {
    message: 'What message(s) do you want to convey through your LED sign?',
  },
};

const emailTitle = 'ðŸ¤–: Accessibility form submission';
const nameLabel = FormLabels['default'].name;
const emailLabel = FormLabels['default'].email;
const phoneLabel = FormLabels['default'].phone;
const messageLabel = FormLabels['default'].message;
const submitLabel = FormLabels['default'].submit;
---

<section id="contact-form">
  <div class="region flow prose box" style="--padding: var(--space-s) 0;">
    <h2 class="mx-auto">How can we do better?</h2>
  </div>
  <form
    name="accessibility"
    netlify-honeypot="additional-info"
    class="switcher region wrapper"
    style=" --region-space-top: 0; --gutter: 0;"
    method="POST"
    data-netlify="true"
    action="/forms/submit"
  >
    <input type="hidden" name="subject" value={emailTitle} />
    <input type="hidden" name="form-name" value="accessibility" />
    <p class="hidden">
      <label for="additional-info">Do you like delicious treats?</label>
      <input name="additional-info" id="additional-info" />
    </p>
    <div class="switcher step-0" style="--gutter: initial;">
      <div class="flow">
        <div class="switcher">
          <span class="stack">
            <label for="name">{nameLabel}</label>
            <input
              type="text"
              name="name"
              id="name"
              required
              aria-required="true"
            />
          </span>
          <span class="stack">
            <label for="email">{emailLabel}</label>
            <input
              type="email"
              name="email"
              id="email"
              required
              aria-required="true"
            />
          </span>
        </div>
        <div class="switcher">
          <span class="stack">
            <label for="phone">{phoneLabel}</label>
            <input type="tel" name="phone" id="phone" />
          </span>
        </div>
      </div>
      <div class="flow">
        <span class="stack">
          <label for="message">{messageLabel}</label>
          <textarea
            name="message"
            id="message"
            rows="6"
            required
            aria-required="true"></textarea>
        </span>
        <span class="stack">
          <cap-widget
            id="access-cap"
            data-cap-api-endpoint="/api/"
            aria-describedby="access-cap-hint"></cap-widget>
          <input type="hidden" name="cap-token" id="access-cap-token" />
        </span>
        <span class="stack"
          ><p id="access-cap-hint" style="display:none" aria-live="polite">
            Please verify you're human to continue.
          </p></span
        >
        <button type="submit" id="access-submit">{submitLabel}</button>
        <p id="access-success" style="display:none" aria-live="polite"></p>
      </div>
    </div>
  </form>
  <script>
    const aCap = document.getElementById('access-cap') as any;
    const aBtn = document.getElementById('access-submit');
    const aTokenInput = document.getElementById(
      'access-cap-token'
    ) as HTMLInputElement;
    const aForm = document.querySelector(
      'form[name="accessibility"]'
    ) as HTMLFormElement | null;
    const aSuccessMsg = document.getElementById(
      'access-success'
    ) as HTMLParagraphElement | null;
    const aCapHint = document.getElementById(
      'access-cap-hint'
    ) as HTMLElement | null;
    let aPendingSubmit = false;
    let aInFlight = false;
    const aStatusEl = document.createElement('div');
    aStatusEl.id = 'access-submit-status';
    aStatusEl.setAttribute('role', 'status');
    aStatusEl.setAttribute('aria-live', 'polite');
    aStatusEl.tabIndex = -1;

    aCap?.addEventListener('solve', (event: any) => {
      // Capture the CapJS token from the widget
      if (aTokenInput) {
        let token = aCap.getToken ? aCap.getToken() : event.detail?.token || '';
        // If token is an array, take the first element
        if (Array.isArray(token)) {
          token = token[0];
        }
        aTokenInput.value = token;
      }
      aCap?.removeAttribute('aria-invalid');
      if (aCapHint) aCapHint.style.display = 'none';
      if (aPendingSubmit && aForm) {
        aPendingSubmit = false;
        aForm.requestSubmit();
      }
    });

    aCap?.addEventListener('reset', () => {
      // Clear the token when reset
      if (aTokenInput) {
        aTokenInput.value = '';
      }
    });

    // Progressive enhancement: inline success + redirect for GA
    aForm?.addEventListener('submit', async (e) => {
      if (!(window as any).fetch) return; // fallback to normal submit if no fetch
      if (!aTokenInput?.value) {
        e.preventDefault();
        aPendingSubmit = true;
        aCap?.setAttribute('aria-invalid', 'true');
        if (aCapHint) {
          aCapHint.textContent = 'Please complete the verification to submit.';
          aCapHint.style.display = '';
        }
        if (aCap?.scrollIntoView) {
          aCap.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        if (aCap?.focus) {
          try {
            aCap.focus();
          } catch (err) {
            // Some browsers may throw if element is not focusable yet; safe to ignore
            console.warn('[access-form] aCap.focus() failed; non-critical', err);
          }
        }
        return;
      }
      e.preventDefault();
      if (aInFlight) return;
      aInFlight = true;
      aForm?.setAttribute('aria-busy', 'true');
      aStatusEl.textContent = 'Submittingâ€¦';
      if (aBtn && aBtn.parentElement) {
        aBtn.replaceWith(aStatusEl);
        try {
          aStatusEl.focus();
        } catch (err) {
          // Focus can fail if element is not yet in DOM tree; safe to ignore
          console.warn('[access-form] aStatusEl.focus() failed; non-critical', err);
        }
      }
      const fd = new FormData(aForm!);
      if (!fd.get('form-name')) fd.set('form-name', 'accessibility');
      try {
        const res = await fetch('/forms/submit', {
          method: 'POST',
          headers: { Accept: 'application/json' },
          body: fd,
        });
        if (res.ok) {
          if (aSuccessMsg) {
            aSuccessMsg.textContent = "Thanks! We'll be in touch shortly.";
            aSuccessMsg.style.display = '';
            try {
              (aSuccessMsg as any).focus?.();
            } catch (err) {
              // Focus may fail if element is not focusable; safe to ignore
              console.warn('[access-form] aSuccessMsg.focus() failed; non-critical', err);
            }
          }
          setTimeout(() => {
            window.location.assign('/thank-you/');
          }, 600);
        } else {
          aCap && aCap.reset && aCap.reset();
          if (aStatusEl && aStatusEl.parentElement) {
            aStatusEl.replaceWith(aBtn!);
          }
          aForm?.removeAttribute('aria-busy');
          aInFlight = false;
          if (aSuccessMsg) {
            aSuccessMsg.textContent =
              'There was a problem submitting. Please try again.';
            aSuccessMsg.style.display = '';
            try {
              (aSuccessMsg as any).focus?.();
            } catch (err) {
              console.warn('[access-form] aSuccessMsg.focus() failed; non-critical', err);
            }
          }
        }
      } catch (err) {
        aCap && aCap.reset && aCap.reset();
        if (aStatusEl && aStatusEl.parentElement) {
          aStatusEl.replaceWith(aBtn!);
        }
        aForm?.removeAttribute('aria-busy');
        aInFlight = false;
        if (aSuccessMsg) {
          aSuccessMsg.textContent = 'Network error. Please try again.';
          aSuccessMsg.style.display = '';
          try {
            (aSuccessMsg as any).focus?.();
          } catch (err) {
            console.warn('[access-form] aSuccessMsg.focus() failed; non-critical', err);
          }
        }
      }
    });
  </script>
</section>
