---
import type { Slug } from '../ts/types';
import { getSiteSettings } from '../api/sanity';

const settings = await getSiteSettings();

const phoneNumber = settings.phoneNumber;

export interface FormLabelTypes {
  name?: string;
  email?: string;
  phone?: string;
  companyName?: string;
  budget?: string;
  deadline?: string;
  needs?: string;
  message: string;
  submit?: string;
}

export const FormLabels: Record<Slug, FormLabelTypes> = {
  default: {
    name: 'Name',
    email: 'Email',
    phone: 'Phone',
    companyName: 'Company name',
    budget: 'Budget',
    deadline: 'Do you have any deadlines we should know about?',
    needs: 'Do you have any specific needs we should know about?',
    message: 'What are your goals?',
    submit: 'Submit',
  },
  'how-to-gain-more-peoples-attention-with-signs-near-your-business': {
    message: 'What message(s) do you want to convey through your LED sign?',
  },
};

interface Props {
  slug: Slug;
  headingContext?: string;
}

const { slug, headingContext } = Astro.props;

const customCTAHeading = headingContext
  ? headingContext.toLowerCase()
  : 'signage';

const emailTitle =
  slug && slug !== 'default'
    ? `ðŸ¤–: Contact form submission from /${slug}`
    : 'ðŸ¤–: Contact form submission';

const nameLabel =
  FormLabels[slug] && FormLabels[slug].name
    ? FormLabels[slug].name
    : FormLabels['default'].name;

const emailLabel =
  FormLabels[slug] && FormLabels[slug].email
    ? FormLabels[slug].email
    : FormLabels['default'].email;

const phoneLabel =
  FormLabels[slug] && FormLabels[slug].phone
    ? FormLabels[slug].phone
    : FormLabels['default'].phone;

const companyLabel =
  FormLabels[slug] && FormLabels[slug].companyName
    ? FormLabels[slug].companyName
    : FormLabels['default'].companyName;

const budgetLabel =
  FormLabels[slug] && FormLabels[slug].budget
    ? FormLabels[slug].budget
    : FormLabels['default'].budget;

const deadlineLabel =
  FormLabels[slug] && FormLabels[slug].deadline
    ? FormLabels[slug].deadline
    : FormLabels['default'].deadline;

const needsLabel =
  FormLabels[slug] && FormLabels[slug].needs
    ? FormLabels[slug].needs
    : FormLabels['default'].needs;

const messageLabel =
  FormLabels[slug] && FormLabels[slug].message
    ? FormLabels[slug].message
    : FormLabels['default'].message;

const submitLabel =
  FormLabels[slug] && FormLabels[slug].submit
    ? FormLabels[slug].submit
    : FormLabels['default'].submit;
---

<section id="contact-form">
  <aside
    class="region flow prose box"
    style="--padding: var(--space-s) 0;"
    aria-label="Contact us section"
  >
    <h2 class="mx-auto mb-l-xl">
      How can we craft uniquely memorable {customCTAHeading} for you?
    </h2>
    <p class="mx-auto">
      Experience the elevated visibility you earned. Whether you decide to visit
      our Hillsborough, NJ office, give us a call at
      <a href="tel:+19085754000">{phoneNumber}</a>, or write us below, we're
      excited to assist you.
    </p>
    {
      headingContext ? null : (
        <p class="mx-auto">
          As your preferred NJ sign company, we pride ourselves on providing a
          range of premium sign solutions - from{' '}
          <a href="/products/channel-letters/">channel letters</a> and{' '}
          <a href="/products/acrylic-signs/">acrylic signs</a> to captivating{' '}
          <a href="/products/cut-metal-letters/">cut metal letter signs</a>.
        </p>
      )
    }
  </aside>
  <form
    name="main"
    netlify-honeypot="additional-info"
    class="switcher region wrapper"
    style=" --region-space-top: 0; --gutter: 0;"
    method="POST"
    data-netlify="true"
    action="/forms/submit"
  >
    <input type="hidden" name="subject" value={emailTitle} />
    <input type="hidden" name="form-name" value="main" />
    <p class="hidden">
      <label for="additional-info">Do you like delicious treats?</label>
      <input name="additional-info" id="additional-info" />
    </p>
    <div class="switcher step-0" style="--gutter: initial;">
      <div class="flow">
        <div class="switcher">
          <span class="stack">
            <label for="name">{nameLabel}</label>
            <input
              type="text"
              name="name"
              id="name"
              required
              aria-required="true"
            />
          </span>
          <span class="stack">
            <label for="email">{emailLabel}</label>
            <input
              type="email"
              name="email"
              id="email"
              required
              aria-required="true"
            />
          </span>
        </div>
        <div class="switcher">
          <span class="stack">
            <label for="phone">{phoneLabel}</label>
            <input type="tel" name="phone" id="phone" />
          </span>
          <span class="stack">
            <label for="companyName">{companyLabel}</label>
            <input type="text" name="companyName" id="companyName" />
          </span>
        </div>
        <span class="stack">
          <label for="budget">{budgetLabel}</label>
          <input type="text" name="budget" id="budget" />
        </span>
      </div>
      <div class="flow">
        <span class="stack">
          <label for="deadline">{deadlineLabel}</label>
          <input type="text" name="deadline" id="deadline" />
        </span>
        <span class="stack">
          <label for="needs">{needsLabel}</label>
          <input type="text" name="needs" id="needs" />
        </span>
        <span class="stack">
          <label for="message">{messageLabel}</label>
          <textarea
            name="message"
            id="message"
            rows="6"
            required
            aria-required="true"></textarea>
        </span>
        <span class="stack">
          <cap-widget
            id="main-cap"
            data-cap-api-endpoint="/api/"
            aria-describedby="main-cap-hint"></cap-widget>
          <input type="hidden" name="cap-token" id="cap-token" />
        </span>
        <span class="stack"
          ><button type="submit" id="main-submit">{submitLabel}</button></span
        >
        <span class="stack">
          <p id="main-cap-hint" style="display:none" aria-live="polite">
            Please verify you're human to continue.
          </p>
          <p id="main-success" style="display:none" aria-live="polite"></p>
        </span>
      </div>
    </div>
  </form>
  <script>
    const cap = document.getElementById('main-cap') as any;
    const btn = document.getElementById('main-submit');
    const tokenInput = document.getElementById('cap-token') as HTMLInputElement;
    const form = document.querySelector(
      'form[name="main"]'
    ) as HTMLFormElement | null;
    const successMsg = document.getElementById(
      'main-success'
    ) as HTMLParagraphElement | null;
    const capHint = document.getElementById(
      'main-cap-hint'
    ) as HTMLElement | null;
    let pendingSubmit = false;
    let inFlight = false;
    const statusEl = document.createElement('div');
    statusEl.id = 'main-submit-status';
    statusEl.setAttribute('role', 'status');
    statusEl.setAttribute('aria-live', 'polite');
    statusEl.tabIndex = -1;

    cap?.addEventListener('solve', (event: any) => {
      // Capture the CapJS token from the widget
      if (tokenInput) {
        let token = cap.getToken ? cap.getToken() : event.detail?.token || '';

        // If token is an array, take the first element
        if (Array.isArray(token)) {
          token = token[0];
        }

        tokenInput.value = token;
      }
      // Clear any hint and invalid state
      cap?.removeAttribute('aria-invalid');
      if (capHint) capHint.style.display = 'none';
      // If user tried to submit before solving, auto-submit now
      if (pendingSubmit && form) {
        pendingSubmit = false;
        form.requestSubmit();
      }
    });

    cap?.addEventListener('reset', () => {
      // Clear the token when reset
      if (tokenInput) {
        tokenInput.value = '';
      }
    });

    // Progressive enhancement: inline success + redirect for GA
    form?.addEventListener('submit', async (e) => {
      if (!(window as any).fetch) return; // fallback to normal submit if no fetch
      // Client-side guard: require Cap token before submit
      if (!tokenInput?.value) {
        e.preventDefault();
        pendingSubmit = true;
        cap?.setAttribute('aria-invalid', 'true');
        if (capHint) {
          capHint.textContent = 'Please complete the verification to submit.';
          capHint.style.display = '';
        }
        if (cap?.scrollIntoView) {
          cap.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        if (cap?.focus) {
          try {
            cap.focus();
          } catch {}
        }
        return;
      }
      e.preventDefault();
      if (inFlight) return;
      inFlight = true;
      form?.setAttribute('aria-busy', 'true');
      statusEl.textContent = 'Submittingâ€¦';
      if (btn && btn.parentElement) {
        btn.replaceWith(statusEl);
        try {
          statusEl.focus();
        } catch {}
      }
      const fd = new FormData(form!);
      if (!fd.get('form-name')) fd.set('form-name', 'main');
      try {
        const res = await fetch('/forms/submit', {
          method: 'POST',
          headers: { Accept: 'application/json' },
          body: fd,
        });
        if (res.ok) {
          if (successMsg) {
            successMsg.textContent = "Thanks! We'll be in touch shortly.";
            successMsg.style.display = '';
            try {
              (successMsg as any).focus?.();
            } catch {}
          }
          setTimeout(() => {
            window.location.assign('/thank-you/');
          }, 600);
        } else {
          // Reset Cap on failure and re-enable submit
          cap && cap.reset && cap.reset();
          if (statusEl && statusEl.parentElement) {
            statusEl.replaceWith(btn!);
          }
          form?.removeAttribute('aria-busy');
          inFlight = false;
          if (successMsg) {
            successMsg.textContent =
              'There was a problem submitting. Please try again.';
            successMsg.style.display = '';
            try {
              (successMsg as any).focus?.();
            } catch {}
          }
        }
      } catch (err) {
        cap && cap.reset && cap.reset();
        if (statusEl && statusEl.parentElement) {
          statusEl.replaceWith(btn!);
        }
        form?.removeAttribute('aria-busy');
        inFlight = false;
        if (successMsg) {
          successMsg.textContent = 'Network error. Please try again.';
          successMsg.style.display = '';
          try {
            (successMsg as any).focus?.();
          } catch {}
        }
      }
    });
  </script>
</section>
